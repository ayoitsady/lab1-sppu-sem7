# Design 8-Queens matrix having first Queen placed. Use backtracking to place remaining Queens to generate the final 8-queenâ€™s matrix. 

N = 8

def print_board(board):
    for row in board:
        print(" ".join(str(x) for x in row))
    print("\n")

def is_safe(board, row, col):
    for i in range(row):
        if board[i][col] == 1:
            return False

    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    for i, j in zip(range(row, -1, -1), range(col, N)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens(board, row):
    if row >= N:
        return True

    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1

            if solve_n_queens(board, row + 1):
                return True

            board[row][col] = 0

    return False

def solve_8_queens():
    board = [[0 for _ in range(N)] for _ in range(N)]

    board[0][0] = 1

    if solve_n_queens(board, 1):
        print_board(board)
    else:
        print("No solution found.")

solve_8_queens()